# Remove logging to the Windows Event Log
# Workaround for compilation failure: https://github.com/ungoogled-software/ungoogled-chromium-windows/pull/46

--- a/chrome/common/BUILD.gn
+++ b/chrome/common/BUILD.gn
@@ -125,7 +125,6 @@ source_set("request_code_constants") {
 static_library("common_lib") {
   visibility = [
     ":*",
-    "//chrome/common/win:eventlog_messages",
   ]
   sources = [
     "all_messages.h",
@@ -375,7 +374,6 @@ static_library("common_lib") {
       "conflicts/remote_module_watcher_win.cc",
       "conflicts/remote_module_watcher_win.h",
     ]
-    deps += [ "//chrome/common/win:eventlog_messages" ]
 
     public_deps += [
       "//components/dom_distiller/core",  # Needed by chrome_content_client.cc.
--- a/chrome/common/logging_chrome.cc
+++ b/chrome/common/logging_chrome.cc
@@ -68,7 +68,6 @@
 #include "base/syslog_logging.h"
 #include "base/win/scoped_handle.h"
 #include "base/win/windows_handle_util.h"
-#include "chrome/common/win/eventlog_messages.h"
 #include "chrome/install_static/install_details.h"
 #include "sandbox/policy/switches.h"
 #endif
@@ -528,11 +527,6 @@ void InitChromeLogging(const base::Comma
 #if BUILDFLAG(IS_WIN)
   // Enable trace control and transport through event tracing for Windows.
   LogEventProvider::Initialize(kChromeTraceProviderName);
-
-  // Enable logging to the Windows Event Log.
-  SetEventSource(base::WideToASCII(
-                     install_static::InstallDetails::Get().install_full_name()),
-                 BROWSER_CATEGORY, MSG_LOG_MESSAGE);
 #endif
 
   base::StatisticsRecorder::InitLogOnShutdown();
--- a/chrome/elevation_service/BUILD.gn
+++ b/chrome/elevation_service/BUILD.gn
@@ -95,7 +95,6 @@ source_set("service_lib") {
   deps = [
     ":lib",
     "//base",
-    "//chrome/common/win:eventlog_provider",
     "//chrome/install_static:install_static_util",
   ]
 }
--- a/chrome/elevation_service/elevation_service_delegate.cc
+++ b/chrome/elevation_service/elevation_service_delegate.cc
@@ -12,7 +12,6 @@
 #include "base/containers/heap_array.h"
 #include "base/logging.h"
 #include "base/types/expected.h"
-#include "chrome/common/win/eventlog_messages.h"
 #include "chrome/elevation_service/elevated_recovery_impl.h"
 #include "chrome/elevation_service/elevator.h"
 #include "chrome/install_static/install_util.h"
@@ -20,11 +19,11 @@
 namespace elevation_service {
 
 uint16_t Delegate::GetLogEventCategory() {
-  return ELEVATION_SERVICE_CATEGORY;
+  return 0;
 }
 
 uint32_t Delegate::GetLogEventMessageId() {
-  return MSG_ELEVATION_SERVICE_LOG_MESSAGE;
+  return 0;
 }
 
 base::expected<base::HeapArray<FactoryAndClsid>, HRESULT>
--- a/chrome/windows_services/elevated_tracing_service/BUILD.gn
+++ b/chrome/windows_services/elevated_tracing_service/BUILD.gn
@@ -95,7 +95,6 @@ source_set("service_lib") {
   ]
   deps = [
     ":lib",
-    "//chrome/common/win:eventlog_provider",
     "//chrome/install_static:install_static_util",
     "//services/tracing/public/cpp",
   ]
--- a/chrome/windows_services/elevated_tracing_service/elevated_tracing_service_delegate.cc
+++ b/chrome/windows_services/elevated_tracing_service/elevated_tracing_service_delegate.cc
@@ -15,7 +15,6 @@
 #include "base/task/sequenced_task_runner.h"
 #include "base/task/thread_pool.h"
 #include "base/task/thread_pool/thread_pool_instance.h"
-#include "chrome/common/win/eventlog_messages.h"
 #include "chrome/install_static/install_util.h"
 #include "chrome/windows_services/elevated_tracing_service/session_registry.h"
 #include "chrome/windows_services/elevated_tracing_service/system_tracing_session.h"
@@ -79,11 +78,11 @@ Delegate::Delegate() = default;
 Delegate::~Delegate() = default;
 
 uint16_t Delegate::GetLogEventCategory() {
-  return TRACING_SERVICE_CATEGORY;
+  return 0;
 }
 
 uint32_t Delegate::GetLogEventMessageId() {
-  return MSG_TRACING_SERVICE_LOG_MESSAGE;
+  return 0;
 }
 
 base::expected<base::HeapArray<FactoryAndClsid>, HRESULT>
